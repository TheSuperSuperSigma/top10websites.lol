rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // IndyMower Rules
    match /bookings/{booking} {
      allow read: if true;  // Anyone can read bookings
      allow create: if true;  // Anyone can create bookings
      allow update, delete: if false;  // No updates or deletes
    }

    match /mowerServices/{service} {
      allow read: if true;  // Anyone can read service listings
      allow write: if false;  // Only admin can modify through Firebase Console
    }

    // Unskool Rules (keeping your existing rules)
    function isAuthenticated() {
      return request.auth != null;
    }

    function isMemberOfServer(serverId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/servers/$(serverId)/members/$(request.auth.uid));
    }

    function isServerAdmin(serverId) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/servers/$(serverId)/members/$(request.auth.uid)).data.role == "admin";
    }

    // Server rules
    match /servers/{serverId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated() && 
        exists(/databases/$(database)/documents/servers/$(serverId)/members/$(request.auth.uid));
      
      // Server members subcollection
      match /members/{userId} {
        allow read: if isMemberOfServer(serverId);
        allow write: if isServerAdmin(serverId);
      }

      // Server channels
      match /channels/{channelId} {
        allow read: if isMemberOfServer(serverId);
        allow write: if isServerAdmin(serverId);

        // Channel messages
        match /messages/{messageId} {
          allow read: if isMemberOfServer(serverId);
          allow create: if isMemberOfServer(serverId);
          allow update, delete: if request.auth.uid == resource.data.userId;
        }
      }
    }

    // Server invites
    match /serverInvites/{inviteId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        isServerAdmin(request.resource.data.serverId);
    }

    // Basic user profile access
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
      
      match /friends/{friendId} {
        allow read, write: if isAuthenticated() && 
          (request.auth.uid == userId || request.auth.uid == friendId);
      }

      // Add profile images subcollection
      match /images/{imageId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && request.auth.uid == userId;
      }
    }
    
    // Friend requests collection
    match /friendRequests/{requestId} {
      allow read: if isAuthenticated() && (
        resource.data.to == request.auth.uid || 
        resource.data.from == request.auth.uid
      );
      allow create: if isAuthenticated() && 
        request.resource.data.from == request.auth.uid;
      allow delete: if isAuthenticated() && (
        resource.data.to == request.auth.uid || 
        resource.data.from == request.auth.uid
      );
    }

    // Messages collection
    match /messages/{messageId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }

    // Direct Messages
    match /directMessages/{messageId} {
      allow read: if isAuthenticated() && (
        resource.data.fromUserId == request.auth.uid ||
        resource.data.toUserId == request.auth.uid ||
        resource.data.chatId.matches(request.auth.uid + '.*') ||
        resource.data.chatId.matches('.*' + request.auth.uid)
      );
      
      allow create: if isAuthenticated() && 
        request.resource.data.fromUserId == request.auth.uid &&
        request.resource.data.chatId.matches('.*' + request.auth.uid + '.*');
        
      allow delete: if isAuthenticated() &&
        resource.data.fromUserId == request.auth.uid;
    }

    // Chat Images (for message attachments)
    match /chatImages/{imageId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }

    // Default rule (deny everything else)
    match /{document=**} {
      allow read, write: if false;
    }
  }
}




